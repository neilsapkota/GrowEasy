import React from 'react';
import { Language, User, UserProgress, PracticeMode, Page } from '../types';
import { MicrophoneIcon, HeadphonesIcon, CardsIcon, BookOpenIcon, RoleplayIcon, WritingIcon } from './icons';

interface PracticeHubPageProps {
    language: Language;
    progress: UserProgress | null;
    user: User | null;
    onStartPractice: (mode: PracticeMode) => void;
    onNavigate: (page: Page) => void;
}

interface PracticeCardProps {
    title: string;
    description: string;
    icon: React.ElementType;
    color: string;
    onClick: () => void;
}

const PracticeCard: React.FC<PracticeCardProps> = ({ title, description, icon: Icon, color, onClick }) => {
    return (
        <div className="relative group">
             <div className="absolute -inset-0.5 bg-gradient-to-r from-sky-600 to-teal-600 rounded-2xl blur opacity-0 group-hover:opacity-75 transition duration-300"></div>
            <button
                onClick={onClick}
                className="relative p-6 rounded-2xl text-left transition-all duration-300 w-full overflow-hidden h-full bg-slate-800/80 backdrop-blur-sm shadow-lg group-hover:bg-slate-900"
            >
                <div className="relative z-0">
                    <div className={`p-3 rounded-lg inline-block mb-4 ${color} shadow-lg`}>
                        <Icon className="w-8 h-8 text-white" />
                    </div>
                    <h3 className="text-xl font-bold text-white">{title}</h3>
                    <p className="text-slate-400 mb-4">{description}</p>
                </div>
            </button>
        </div>
    );
};

const PracticeHubPage: React.FC<PracticeHubPageProps> = ({ language, onStartPractice, onNavigate }) => {
    const practiceOptions: Omit<PracticeCardProps, 'onClick'>[] = [
        {
            title: 'Live Conversation',
            description: 'Speak directly with an AI tutor in real-time.',
            icon: MicrophoneIcon,
            color: 'bg-teal-500',
        },
        {
            title: 'Role-play Scenarios',
            description: 'Practice real-world conversations.',
            icon: RoleplayIcon,
            color: 'bg-orange-500',
        },
        {
            title: 'Writing Workshop',
            description: 'Hone your writing skills with AI-graded prompts.',
            icon: WritingIcon,
            color: 'bg-indigo-500',
        },
        {
            title: 'Flashcard Decks',
            description: 'Create and study your own custom flashcards.',
            icon: CardsIcon,
            color: 'bg-cyan-500',
        },
        {
            title: 'Pronunciation',
            description: 'Get AI feedback on your pronunciation.',
            icon: MicrophoneIcon,
            color: 'bg-blue-500',
        },
        {
            title: 'Listening',
            description: 'Boost your listening with audio-only sessions.',
            icon: HeadphonesIcon,
            color: 'bg-violet-500',
        },
        {
            title: 'Stories',
            description: 'Jump into an interactive story generated by AI.',
            icon: BookOpenIcon,
            color: 'bg-emerald-500',
        },
    ];

    const modeMap: Record<string, PracticeMode> = {
        'Live Conversation': 'conversation',
        'Listening': 'listening',
        'Stories': 'stories',
        'Pronunciation': 'pronunciation',
        'Role-play Scenarios': 'roleplay',
        'Writing Workshop': 'writing',
    };

    return (
        <div className="px-4 animate-fade-in">
            <h2 className="text-3xl font-bold text-slate-100 mb-2">Practice Hub</h2>
            <p className="text-slate-400 mb-10">Sharpen your {language.name} skills!</p>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {practiceOptions.map(opt => (
                    <PracticeCard
                        key={opt.title}
                        {...opt}
                        onClick={() => {
                            if (opt.title === 'Flashcard Decks') {
                                onNavigate(Page.FlashcardDecks);
                            } else {
                                onStartPractice(modeMap[opt.title]);
                            }
                        }}
                    />
                ))}
            </div>
        </div>
    );
};

export default PracticeHubPage;
